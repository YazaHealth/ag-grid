---
title: "Quick Start"
description: "Build a $framework Table with AG Grid, the best free, fast and flexible $framework Data Grid. Features Sorting, Filtering, Pagination, Custom Components, and more."
---

{% if isFramework("vue") %}
This page shows you how to Get Started with AG Grid: A high performance, feature rich, Vue Table and Vue Data Grid. 
{% /if %}

{% if isFramework("react") %}
{% videoSection id="6hxbPqziELk" title="React Data Grid quick start video tutorial" playlist="PLsZlhayVgqNwHNHeqpCkSgdRV08xrKtzW" showHeader=true %}
This page shows you how to Get Started with AG Grid: A high performance, feature rich, [React Table](/react-table/) and React Data Grid. 
{% /videoSection %}
{% /if %}

{% if isFramework("angular") %}
{% videoSection id="X_Ip_jGDtho" title="Angular Data Grid quick start video tutorial" playlist="PLsZlhayVgqNw6VHFn4j6FcJM5vLACsf0x" showHeader=true %}
This page shows you how to Get Started with AG Grid: A high performance, feature rich, Angular Table and Angular Data Grid. 
{% /videoSection %}
{% /if %}

{% if isFramework("javascript") %}
{% videoSection id="Ww7-LC6rU6U" title="JavaScript Data Grid quick start video tutorial" playlist="PLsZlhayVgqNxijfRQxg5Mc6W4MzZHQ9MK" showHeader=true %}
This page shows you how to Get Started with AG Grid: A high performance, feature rich, JavaScript Table and JavaScript Data Grid. 
{% /videoSection %}
{% /if %}

{% if isFramework("react", "angular", "vue") %}
## NPM Install
{% /if %}

{% if isFramework("react") %}
<!-- Install React -->

```bash
npm install ag-grid-react
```
{% /if %}

{% if isFramework("angular") %}
<!-- Install Angular -->

```bash
npm install ag-grid-angular
```
{% /if %}

{% if isFramework("vue") %}
<!-- Install Vue3 -->

```bash
npm install ag-grid-vue3
```
{% /if %}

{% if isFramework("javascript") %}
{% metaTag tags=["createGrid"] /%}
## Provide a Container

<!-- Create JavaScript -->

Load the AG Grid library and create a blank container div:

```html
<html lang="en">
 <head>
   <!-- Includes all JS & CSS for the JavaScript Data Grid -->
   <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
 </head>
 <body>
   <!-- Your Data Grid container -->
   <div id="myGrid"></div>
 </body>
</html>
```

## Instantiating the JavaScript Data Grid

Create the Data Grid inside of your container div using `createGrid`.

```js
// Grid Options: Contains all of the Data Grid configurations
const gridOptions = {};

// Your Javascript code to create the Data Grid
const myGridElement = document.querySelector('#myGrid');
agGrid.createGrid(myGridElement, gridOptions);
```

## Define Rows and Columns

```js
// Grid Options: Contains all of the Data Grid configurations
const gridOptions = {
 // Row Data: The data to be displayed.
 rowData: [
   { make: "Tesla", model: "Model Y", price: 64950, electric: true },
   { make: "Ford", model: "F-Series", price: 33850, electric: false },
   { make: "Toyota", model: "Corolla", price: 29600, electric: false },
 ],
 // Column Definitions: Defines the columns to be displayed.
 columnDefs: [
   { field: "make" },
   { field: "model" },
   { field: "price" },
   { field: "electric" }
 ]
};
```

## Styling the JavaScript Data Grid

Add the `ag-theme-quartz` CSS class to your Data Grid container div to apply the Data Grid's theme.

```html
<!-- Your Data Grid container -->
<div id="myGrid" class="ag-theme-quartz" style="height: 500px"></div>
```
{% /if %}

{% if isFramework("react") %}
{% metaTag tags=["aggridreact"] /%}
<!-- Create React -->

## Import the React Data Grid

```js
import { AgGridReact } from 'ag-grid-react'; // React Data Grid Component
import "ag-grid-community/styles/ag-grid.css"; // Mandatory CSS required by the Data Grid
import "ag-grid-community/styles/ag-theme-quartz.css"; // Optional Theme applied to the Data Grid
```

## Define Rows and Columns

```js
const GridExample = () => {
 // Row Data: The data to be displayed.
 const [rowData, setRowData] = useState([
   { make: "Tesla", model: "Model Y", price: 64950, electric: true },
   { make: "Ford", model: "F-Series", price: 33850, electric: false },
   { make: "Toyota", model: "Corolla", price: 29600, electric: false },
 ]);
 
 // Column Definitions: Defines the columns to be displayed.
 const [colDefs, setColDefs] = useState([
   { field: "make" },
   { field: "model" },
   { field: "price" },
   { field: "electric" }
 ]);

 // ...

}
```

## React Data Grid Component

The `AgGridReact` component is wrapped in a parent container `div`. Style is applied to the parent container.
Rows and Columns are set as `AgGridReact` component attributes.

```jsx
return (
 // wrapping container with theme & size
 <div
  className="ag-theme-quartz" // applying the Data Grid theme
  style={{ height: 500 }} // the Data Grid will fill the size of the parent container
 >
   <AgGridReact
       rowData={rowData}
       columnDefs={colDefs}
   />
 </div>
)
```
{% /if %}

{% if isFramework("angular") %}

**2. Import the Angular Data Grid**

```js
import { Component } from '@angular/core';
import { AgGridAngular } from 'ag-grid-angular'; // Angular Data Grid Component
import { ColDef } from 'ag-grid-community'; // Column Definition Type Interface
```

## Define Rows and Columns

```jsx
@Component({
 selector: 'app-root',
 standalone: true,
 imports: [AgGridAngular], // Add Angular Data Grid Component
 styleUrls: ['./app.component.css'],
 template: ``
})

export class AppComponent {
 // Row Data: The data to be displayed.
 rowData = [
   { make: "Tesla", model: "Model Y", price: 64950, electric: true },
   { make: "Ford", model: "F-Series", price: 33850, electric: false },
   { make: "Toyota", model: "Corolla", price: 29600, electric: false },
 ];

 // Column Definitions: Defines the columns to be displayed.
 colDefs: ColDef[] = [
   { field: "make" },
   { field: "model" },
   { field: "price" },
   { field: "electric" }
 ];
}
```

## Angular Data Grid Component

Rows and Columns are set as `ag-grid-angular` component attributes.

```js
template:
`
 <!-- The AG Grid component -->
 <ag-grid-angular
   [rowData]="rowData"
   [columnDefs]="colDefs" />
`
```

## Styling the Data Grid

Import the required dependencies into your `styles.css` file.

```js
/* Core Data Grid CSS */
import 'ag-grid-community/styles/ag-grid.css';
/* Quartz Theme Specific CSS */
import 'ag-grid-community/styles/ag-theme-quartz.css';
```

Add the `class` and `style` props to the `ag-grid-angular` component.

```html
<ag-grid-angular
 class="ag-theme-quartz"
 style="height: 500px;"
 ...
 />
```
{% /if %}

{% if isFramework("vue") %}

## Import the Vue Data Grid

```html
<template></template>

<script>
import { ref } from 'vue';
import "ag-grid-community/styles/ag-grid.css"; // Mandatory CSS required by the Data Grid
import "ag-grid-community/styles/ag-theme-quartz.css"; // Optional Theme applied to the Data Grid
import { AgGridVue } from "ag-grid-vue3"; // Vue Data Grid Component

export default {
 name: "App",
 components: {
   AgGridVue, // Add Vue Data Grid component
 },
 setup() {},
};
</script>
```

## Define Rows and Columns

```js
setup() {
 // Row Data: The data to be displayed.
 const rowData = ref([
   { make: "Tesla", model: "Model Y", price: 64950, electric: true },
   { make: "Ford", model: "F-Series", price: 33850, electric: false },
   { make: "Toyota", model: "Corolla", price: 29600, electric: false },
 ]);

 // Column Definitions: Defines the columns to be displayed.
 const colDefs = ref([
   { field: "make" },
   { field: "model" },
   { field: "price" },
   { field: "electric" }
 ]);

 return {
   rowData,
   colDefs,
 };
},
```

## Vue Data Grid Component

Rows and Columns are set as `ag-grid-vue` component attributes. Styling is applied through the class and style attributes.

```html
<template>
 <!-- The AG Grid component -->
 <ag-grid-vue
   :rowData="rowData"
   :columnDefs="colDefs"
   style="height: 500px"
   class="ag-theme-quartz"
 >
 </ag-grid-vue>
</template>
```
{% /if %}

{% if isFramework("angular") %}
## Running the Angular Data Grid
{% /if %}

{% if isFramework("react") %}
## Running the React Data Grid
{% /if %}

{% if isFramework("vue") %}
## Running the Vue Data Grid
{% /if %}

{% if isFramework("javascript") %}
## Running the JavaScript Data Grid
{% /if %}

Below is a live example of the application running. Click `</> Code` to see the code.

{% gridExampleRunner title="Quick Start Example" name="quick-start-example"  exampleHeight=303 /%}

{% note %}
To live-edit the code, open the example in CodeSandbox or Plunker using the buttons to the lower-right.
{% /note %}

## Next Steps

Choose one of the following options to continue your learning journey:

### New To Data Grids?

Follow our beginner tutorial that guides you through creating your first grid to learn how to use our core features.

[Introduction to AG Grid](/javascript-data-grid/deep-dive/)

---

### Experienced Developer?

Browse our Key Concepts to see how AG Grid implements commonly used features, without any fluff.

[Key Concepts](/javascript-data-grid/key-concepts/)

---

### Visual Learner?

Watch our collection of tutorial videos which cover everything from setup to advanced enterprise features.

[Video Tutorials](/javascript-data-grid/videos/)

---